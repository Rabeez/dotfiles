/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var u=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var M=(r,t)=>{for(var i in t)u(r,i,{get:t[i],enumerable:!0})},C=(r,t,i,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of k(t))!x.call(r,n)&&n!==i&&u(r,n,{get:()=>t[n],enumerable:!(e=E(t,n))||e.enumerable});return r};var y=r=>C(u({},"__esModule",{value:!0}),r);var b={};M(b,{default:()=>h});module.exports=y(b);var g=require("obsidian");var w=require("@codemirror/state"),d=require("@codemirror/view");function V(r,t){let i=r.length,e=t.length,n=[];for(let o=0;o<=i;o++){n[o]=[];for(let a=0;a<=e;a++)n[o][a]=0}let s="",m=0;for(let o=0;o<i;o++)for(let a=0;a<e;a++)r[o]===t[a]&&(n[o+1][a+1]=n[o][a]+1,n[o+1][a+1]>m&&(m=n[o+1][a+1],s=r.substring(o-m+1,o+1)));return s}var p=class{constructor(t){this.decorations=this.buildDecorations(t)}update(t){t instanceof d.EditorView?(this.decorations=this.buildDecorations(t),t.dispatch()):(t.docChanged||t.viewportChanged)&&(this.decorations=this.buildDecorations(t.view))}setYankText(t,i){return this.cleanYankText(i),this.yankText=t,this.update(i),this}cleanYankText(t){return this.yankText=null,this.update(t),this}destroy(){}buildDecorations(t){let i=new w.RangeSetBuilder;if(this.cursorHead=null,!this.yankText||t.state.doc.length===0)return i.finish();let e=t.viewport,n=t.state.sliceDoc(e.from,e.to)+`
`,s=V(n,this.yankText),m=this.getSubstringPosition(t,n,s),o=e.from+m,a=o+s.length;return i.add(o,a,d.Decoration.mark({class:"ovy-highlight"})),i.finish()}getSubstringPosition(t,i,e){this.cursorHead=this.cursorHead||t.state.selection.main.head-t.viewport.from;let n=i.indexOf(e);for(;n!==-1&&!(n<=this.cursorHead&&this.cursorHead<=n+e.length);){if(n>this.cursorHead)break;n=i.indexOf(e,n+1)}return n}},D={decorations:r=>r.decorations},f=d.ViewPlugin.fromClass(p,D);var T=require("obsidian");var c=require("obsidian"),v={highlightDuration:500},l=class extends c.PluginSettingTab{constructor(i,e){super(i,e);this.plugin=e}display(){let{containerEl:i}=this;i.empty(),new c.Setting(i).setName("Date duration").setDesc("Duration in milliseconds for the highlights").addText(e=>e.setPlaceholder("500").setValue(this.plugin.settings.highlightDuration.toString()).onChange(async n=>{let s=parseInt(n);if(isNaN(s)){this.plugin.settings.highlightDuration=v.highlightDuration,await this.plugin.saveSettings();return}this.plugin.settings.highlightDuration=s,await this.plugin.saveSettings()}))}};var h=class extends g.Plugin{constructor(){super(...arguments);this.vimCommand=[];this.vimCommandDone=!1;this.onVimKeypress=i=>{this.vimCommand.push(i),this.vimCommandDone&&((this.vimCommand.contains("y")||this.vimCommand.contains("Y"))&&this.highlightYank(),this.vimCommandDone=!1,this.vimCommand.splice(0,this.vimCommand.length))};this.onVimCommandDone=()=>{this.vimCommandDone=!0}}get activeView(){return this.app.workspace.getActiveViewOfType(g.MarkdownView)}get activeEditorView(){var i,e;return(e=((i=this.activeView)==null?void 0:i.leaf.view).editor)==null?void 0:e.cm}get codeMirror(){var i,e,n,s;return(s=(n=(e=(i=this.activeView)==null?void 0:i.editMode)==null?void 0:e.editor)==null?void 0:n.cm)==null?void 0:s.cm}async onload(){await this.loadSettings(),this.addSettingTab(new l(this.app,this)),this.registerEditorExtension([f]),this.registerEvent(this.app.workspace.on("active-leaf-change",()=>{this.initialized||this.initialize()}))}initialize(){var i;if(this.activeView&&this.codeMirror){this.codeMirrorVimObject=(i=window.CodeMirrorAdapter)==null?void 0:i.Vim;let e=this.codeMirror;e.off("vim-keypress",this.onVimKeypress),e.on("vim-keypress",this.onVimKeypress),e.off("vim-command-done",this.onVimCommandDone),e.on("vim-command-done",this.onVimCommandDone)}}highlightYank(){let e=this.codeMirrorVimObject.getRegisterController().getRegister("yank").keyBuffer[0];if(!this.activeEditorView)return;let n=this.activeEditorView.plugin(f);n.setYankText(e,this.activeEditorView);let s=this.activeEditorView;clearTimeout(this.timeoutHandle),this.timeoutHandle=window.setTimeout(()=>{n.cleanYankText(s)},this.settings.highlightDuration)}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){let i=this.codeMirror;i&&(i.off("vim-keypress",this.onVimKeypress),i.off("vim-command-done",this.onVimCommandDone))}};
