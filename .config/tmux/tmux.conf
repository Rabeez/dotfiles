# General setup
set-window-option -g status-position top
set -g window-status-current-style "underscore"

# Enable RGB colour if running in xterm(1)
set-option -sa terminal-features ",xterm*:RGB"

# Change the default $TERM to tmux-256color
set -g default-terminal "tmux-256color"

# No bells at all
set -g bell-action none

# Scrollback / history
set-option -g history-limit 5000

# TMUX server events
set-option -s focus-events on
set-option -s extended-keys on
set-option -s escape-time 0

# Keep windows around after they exit
set -g remain-on-exit on

# Change the prefix key to C-a
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Continuum and Resurrect
set -g @continuum-restore 'on'

# Custom keybinds for vi-style yanking
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Set colorscheme
# if-shell '[ "$MY_COLOR_MODE" = "light" ]' \
#   'set -g @catppuccin_flavor "latte"' \
#   'set -g @catppuccin_flavor "mocha"'
set -g @catppuccin_flavor "mocha"

# Make the status line pretty and add some modules
set -g @catppuccin_status_connect_separator "no"
set -g status-right-length 200
set -g status-left-length 200
set -g @catppuccin_status_left_separator ""
set -g @catppuccin_status_middle_separator ""
set -g @catppuccin_status_right_separator ""
set -g status-left " "  # Spacer between left edge of screen
set -ga status-left "#{prefix_highlight}"
set -ga status-left " "  # Spacer between elements
set -ga status-left "#{E:@catppuccin_status_session}"
# set -ga status-left "#{E:@catppuccin_status_application}"
set -ga status-left "  "  # Spacer between status items and windows/tabs
set -gF status-right "#{@catppuccin_status_gitmux}"  # IF THIS IS THE LEFT_MOST ENTRY, then ensure no 'a' flag is present
set -ga status-right " "  # Spacer from right edge of screen
set -g @catppuccin_window_flags_icon_zoom " 󰋲 "
set -g @catppuccin_window_text ""
set -g @catppuccin_window_current_text ""
set -g @catppuccin_window_number "#I#{?window_zoomed_flag,#{E:@catppuccin_window_flags_icon_zoom},}"
set -g @catppuccin_window_current_number "#I#{?window_zoomed_flag,#{E:@catppuccin_window_flags_icon_zoom},}"
# Reference: https://github.com/catppuccin/tmux/blob/14a546fb64dc1141e5d02bac2185d8c1fd530d6a/catppuccin_tmux.conf#L149
set -g @catppuccin_window_status_style "custom"
set -g @catppuccin_window_left_separator "#[fg=#{@thm_mantle},bg=#{@thm_surface_2},reverse]#[none]"
set -g @catppuccin_window_middle_separator "#[fg=#{@thm_mantle},bg=#{@thm_surface_2},reverse]#[none]"
set -g @catppuccin_window_right_separator ""
set -g @catppuccin_window_current_left_separator "#[bg=#{@catppuccin_window_current_number_color},reverse]#[none]"
set -g @catppuccin_window_current_middle_separator "#[bg=#{@catppuccin_window_current_number_color},reverse]#[none]"
set -g @catppuccin_window_current_right_separator ""
# Customization for prefix-highlight to show mode in status
set -g @prefix_highlight_prefix_prompt 'TMUX'
set -g @prefix_highlight_empty_prompt 'TMUX'
set -g @prefix_highlight_empty_has_affixes 'on'
set -g @prefix_highlight_output_prefix '#[reverse]#[none]'
set -g @prefix_highlight_output_suffix '#[reverse]#[none]'
set -g @prefix_highlight_copy_prompt 'COPY'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_sync_prompt 'SYNC'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_fg '#{@thm_mantle}'
set -g @prefix_highlight_bg '#{@thm_blue}'
set -g @prefix_highlight_empty_attr 'bg=#{@thm_blue},fg=#{@thm_mantle}'
set -g @prefix_highlight_copy_mode_attr 'bg=#{@thm_mauve},fg=#{@thm_mantle}'
set -g @prefix_highlight_sync_mode_attr 'bg=#{@thm_yellow},fg=#{@thm_mantle}'


# Turn the mouse on, but without copy mode dragging
set -g mouse on
# unbind -n MouseDrag1Pane
# unbind -Tcopy-mode MouseDrag1Pane

# A key to toggle between smallest and largest sizes if a window is visible in multiple places
bind F set -w window-size

# Keys to toggle monitoring activity in a window and the synchronize-panes option
bind m set monitor-activity
bind y set synchronize-panes\; display 'synchronize-panes #{?synchronize-panes,on,off}'

# Keybinds for window navigation
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
# Renumber windows sequentially when one is closed
set -g renumber-windows on
# Vim-like window navigation within the current session
unbind-key p
unbind-key n
# Window jumps
bind-key 1 select-window -t 1
bind-key 2 select-window -t 2
bind-key 3 select-window -t 3
bind-key 4 select-window -t 4
bind-key 5 select-window -t 5
# Map prefix + h for horizontal split and prefix + v for vertical split
bind-key h split-window -h -c "#{pane_current_path}"
bind-key v split-window -v -c "#{pane_current_path}"
bind-key c new-window -c "#{pane_current_path}"
# From smart-splits plugin
set -g @smart-splits_no_wrap ''
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'
set -g @smart-splits_resize_step_size '3' # change the step-size for resizing.
# Jump to last session
bind-key -N "last-session (via sesh) " L run-shell "sesh last"
# Reload tmux config
bind r source-file ~/.config/tmux/tmux.conf
bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt
set -g detach-on-destroy off  # don't exit from tmux when closing a session

# From Sesh
# NOTE: Need to *prime* zoxide to gather all directories
# fd -H -t d '^\.git$' ~/Documents/Programming/ --max-depth 4 -E node_modules -x dirname \
# | xargs -I {} zoxide add {}
bind-key "f" display-popup -E -w 70% -h 60% -b rounded -S "fg=white" "sesh connect \"$(
 sesh list -i -c -z -t -H -d \
 | sed \"s|$HOME|~|\" \
 | gum filter --indicator="" --indicator.foreground="120" --limit 1 --no-sort --fuzzy --no-strip-ansi --placeholder 'Pick a Sesh' --height 60 --prompt=' '
)\""
bind-key "w" display-popup -E -w 50% -h 40% -b rounded -S "fg=white" "sesh connect \"$(
 sesh list -t -i \
 | gum filter --indicator="" --indicator.foreground="120" --limit 1 --no-sort --fuzzy --no-strip-ansi --placeholder 'Pick a session' --height 60 --prompt=' '
)\""
# bind-key "w" display-popup -E -w 50% -h 40% -b rounded -S "fg=white" "bash -c '
#     SESSIONS=\$(sesh list -i -t -H)
#     if [ -z \"\$SESSIONS\" ]; then
#       echo \"No available sessions\"
#       sleep 2
#       exit 0
#     fi
#     SELECTED_SESSION=\$(echo \"\$SESSIONS\" | gum filter --indicator=\"\" --indicator.foreground=\"120\" --limit 1 --no-sort --fuzzy --no-strip-ansi --placeholder \"Pick a session\" --height 60 --prompt=\" \")
#     [ -n \"\$SELECTED_SESSION\" ] && sesh connect \"\$SELECTED_SESSION\"
#  '"
bind-key "n" display-popup -E -w 40% -h 20% -b rounded -S "fg=white" "bash -c '\
    SESSION_NAME=\"\$(gum input --placeholder \"Enter project name\")\"; \
    if [ -z \"\$SESSION_NAME\" ]; then \
        echo \"Error: No session name provided\"; \
        exit 1; \
    fi; \
    TARGET_DIR=\"~/Documents/Programming/Probe/\$SESSION_NAME\"; \
    EXPANDED_DIR=\"\$(eval echo \$TARGET_DIR)\"; \
    if mkdir -p \"\$EXPANDED_DIR\"; then \
        cd \"\$EXPANDED_DIR\" || exit 1; \
        git init; \
        sesh connect \"\$EXPANDED_DIR\"; \
    else \
        echo \"Error: Failed to create directory \$EXPANDED_DIR\"; \
        sleep 2; \
        exit 1; \
    fi'"


# Plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'catppuccin/tmux#v2.1.3'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'mrjones2014/smart-splits.nvim'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '$HOMEBREW_PREFIX/opt/tpm/share/tpm/tpm'
